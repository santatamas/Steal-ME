/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Protocol;

namespace StealME.Server.Core.Communication.Thrift
{
  public partial class NodeService {
    /// <summary>
    /// Standard base service
    /// </summary>
    public interface Iface {
      /// <summary>
      /// Returns th ids of connected (and authenticated!) trackers
      /// </summary>
      List<int> getConnectedTrackerIds();
      #if SILVERLIGHT
      IAsyncResult Begin_getConnectedTrackerIds(AsyncCallback callback, object state, );
      List<int> End_getConnectedTrackerIds(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Checks is the given tracker is connected to the Node
      /// </summary>
      /// <param name="trackerId"></param>
      bool isTrackerConnected(int trackerId);
      #if SILVERLIGHT
      IAsyncResult Begin_isTrackerConnected(AsyncCallback callback, object state, int trackerId);
      bool End_isTrackerConnected(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns the id of this Node
      /// </summary>
      string getNodeId();
      #if SILVERLIGHT
      IAsyncResult Begin_getNodeId(AsyncCallback callback, object state, );
      string End_getNodeId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Sends a predefined command to the tracker
      /// </summary>
      /// <param name="trackerId"></param>
      /// <param name="command"></param>
      void sendCommand(int trackerId, tracker_command command);
      #if SILVERLIGHT
      IAsyncResult Begin_sendCommand(AsyncCallback callback, object state, int trackerId, tracker_command command);
      void End_sendCommand(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// Standard base service
    /// </summary>
    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getConnectedTrackerIds(AsyncCallback callback, object state, )
      {
        return send_getConnectedTrackerIds(callback, state);
      }

      public List<int> End_getConnectedTrackerIds(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getConnectedTrackerIds();
      }

      #endif

      /// <summary>
      /// Returns th ids of connected (and authenticated!) trackers
      /// </summary>
      public List<int> getConnectedTrackerIds()
      {
        #if !SILVERLIGHT
        send_getConnectedTrackerIds();
        return recv_getConnectedTrackerIds();

        #else
        var asyncResult = Begin_getConnectedTrackerIds(null, null, );
        return End_getConnectedTrackerIds(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getConnectedTrackerIds(AsyncCallback callback, object state, )
      #else
      public void send_getConnectedTrackerIds()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getConnectedTrackerIds", TMessageType.Call, seqid_));
        getConnectedTrackerIds_args args = new getConnectedTrackerIds_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<int> recv_getConnectedTrackerIds()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getConnectedTrackerIds_result result = new getConnectedTrackerIds_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getConnectedTrackerIds failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_isTrackerConnected(AsyncCallback callback, object state, int trackerId)
      {
        return send_isTrackerConnected(callback, state, trackerId);
      }

      public bool End_isTrackerConnected(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isTrackerConnected();
      }

      #endif

      /// <summary>
      /// Checks is the given tracker is connected to the Node
      /// </summary>
      /// <param name="trackerId"></param>
      public bool isTrackerConnected(int trackerId)
      {
        #if !SILVERLIGHT
        send_isTrackerConnected(trackerId);
        return recv_isTrackerConnected();

        #else
        var asyncResult = Begin_isTrackerConnected(null, null, trackerId);
        return End_isTrackerConnected(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_isTrackerConnected(AsyncCallback callback, object state, int trackerId)
      #else
      public void send_isTrackerConnected(int trackerId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("isTrackerConnected", TMessageType.Call, seqid_));
        isTrackerConnected_args args = new isTrackerConnected_args();
        args.TrackerId = trackerId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_isTrackerConnected()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isTrackerConnected_result result = new isTrackerConnected_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isTrackerConnected failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getNodeId(AsyncCallback callback, object state, )
      {
        return send_getNodeId(callback, state);
      }

      public string End_getNodeId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getNodeId();
      }

      #endif

      /// <summary>
      /// Returns the id of this Node
      /// </summary>
      public string getNodeId()
      {
        #if !SILVERLIGHT
        send_getNodeId();
        return recv_getNodeId();

        #else
        var asyncResult = Begin_getNodeId(null, null, );
        return End_getNodeId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getNodeId(AsyncCallback callback, object state, )
      #else
      public void send_getNodeId()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getNodeId", TMessageType.Call, seqid_));
        getNodeId_args args = new getNodeId_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getNodeId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getNodeId_result result = new getNodeId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNodeId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendCommand(AsyncCallback callback, object state, int trackerId, tracker_command command)
      {
        return send_sendCommand(callback, state, trackerId, command);
      }

      public void End_sendCommand(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      /// <summary>
      /// Sends a predefined command to the tracker
      /// </summary>
      /// <param name="trackerId"></param>
      /// <param name="command"></param>
      public void sendCommand(int trackerId, tracker_command command)
      {
        #if !SILVERLIGHT
        send_sendCommand(trackerId, command);

        #else
        var asyncResult = Begin_sendCommand(null, null, trackerId, command);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendCommand(AsyncCallback callback, object state, int trackerId, tracker_command command)
      #else
      public void send_sendCommand(int trackerId, tracker_command command)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendCommand", TMessageType.Call, seqid_));
        sendCommand_args args = new sendCommand_args();
        args.TrackerId = trackerId;
        args.Command = command;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getConnectedTrackerIds"] = getConnectedTrackerIds_Process;
        processMap_["isTrackerConnected"] = isTrackerConnected_Process;
        processMap_["getNodeId"] = getNodeId_Process;
        processMap_["sendCommand"] = sendCommand_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getConnectedTrackerIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getConnectedTrackerIds_args args = new getConnectedTrackerIds_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getConnectedTrackerIds_result result = new getConnectedTrackerIds_result();
        result.Success = iface_.getConnectedTrackerIds();
        oprot.WriteMessageBegin(new TMessage("getConnectedTrackerIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void isTrackerConnected_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isTrackerConnected_args args = new isTrackerConnected_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isTrackerConnected_result result = new isTrackerConnected_result();
        result.Success = iface_.isTrackerConnected(args.TrackerId);
        oprot.WriteMessageBegin(new TMessage("isTrackerConnected", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getNodeId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getNodeId_args args = new getNodeId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getNodeId_result result = new getNodeId_result();
        result.Success = iface_.getNodeId();
        oprot.WriteMessageBegin(new TMessage("getNodeId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendCommand_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendCommand_args args = new sendCommand_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.sendCommand(args.TrackerId, args.Command);
        return;
      }
    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getConnectedTrackerIds_args : TBase
    {

      public getConnectedTrackerIds_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getConnectedTrackerIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getConnectedTrackerIds_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getConnectedTrackerIds_result : TBase
    {
      private List<int> _success;

      public List<int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getConnectedTrackerIds_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<int>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    int _elem2 = 0;
                    _elem2 = iprot.ReadI32();
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getConnectedTrackerIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Success.Count));
              foreach (int _iter3 in Success)
              {
                oprot.WriteI32(_iter3);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getConnectedTrackerIds_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isTrackerConnected_args : TBase
    {
      private int _trackerId;

      public int TrackerId
      {
        get
        {
          return _trackerId;
        }
        set
        {
          __isset.trackerId = true;
          this._trackerId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool trackerId;
      }

      public isTrackerConnected_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                TrackerId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isTrackerConnected_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.trackerId) {
          field.Name = "trackerId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TrackerId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isTrackerConnected_args(");
        sb.Append("TrackerId: ");
        sb.Append(TrackerId);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isTrackerConnected_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public isTrackerConnected_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isTrackerConnected_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isTrackerConnected_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNodeId_args : TBase
    {

      public getNodeId_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNodeId_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNodeId_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getNodeId_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getNodeId_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getNodeId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getNodeId_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendCommand_args : TBase
    {
      private int _trackerId;
      private tracker_command _command;

      public int TrackerId
      {
        get
        {
          return _trackerId;
        }
        set
        {
          __isset.trackerId = true;
          this._trackerId = value;
        }
      }

      /// <summary>
      /// 
      /// <seealso cref="tracker_command"/>
      /// </summary>
      public tracker_command Command
      {
        get
        {
          return _command;
        }
        set
        {
          __isset.command = true;
          this._command = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool trackerId;
        public bool command;
      }

      public sendCommand_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                TrackerId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Command = (tracker_command)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendCommand_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.trackerId) {
          field.Name = "trackerId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TrackerId);
          oprot.WriteFieldEnd();
        }
        if (__isset.command) {
          field.Name = "command";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Command);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("sendCommand_args(");
        sb.Append("TrackerId: ");
        sb.Append(TrackerId);
        sb.Append(",Command: ");
        sb.Append(Command);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
